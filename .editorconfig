# EditorConfig is awesome:http://EditorConfig.org
 
# top-most EditorConfig file
root = true
 
[*]
indent_style = space
 
# (Please don't specify an indent_size here; that has too many unintended consequences.)
 
# Code files
[*.{cs,csx,vb,vbx,h,cpp,idl}]
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true
 
# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj},*proj]
indent_size = 2
 
# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2
 
# JSON files
[*.json]
indent_size = 2
 
# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
dotnet_style_qualification_for_field = true:suggestion
dotnet_style_qualification_for_property = false:silent
dotnet_style_qualification_for_method = false:silent
dotnet_style_qualification_for_event = false:silent
 
# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:silent
dotnet_style_predefined_type_for_member_access = true:silent
 
# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
 
# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style
 
dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected internal, private protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static
 
dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case
 
# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = non_private_static_field_style
 
dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const
 
dotnet_naming_style.constant_style.capitalization = pascal_case
 
# Static fields are camelCase
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = camel_case_style
 
dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static
 
dotnet_naming_style.static_field_style.capitalization = camel_case
 
# Instance fields are camelCase
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = camel_case_style
 
dotnet_naming_symbols.instance_fields.applicable_kinds = field
 
dotnet_naming_style.instance_field_style.capitalization = camel_case
 
# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style
 
dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local
 
dotnet_naming_style.camel_case_style.capitalization = camel_case
 
# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = non_private_static_field_style
 
dotnet_naming_symbols.local_functions.applicable_kinds = local_function
 
dotnet_naming_style.local_function_style.capitalization = pascal_case
 
# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = non_private_static_field_style
 
dotnet_naming_symbols.all_members.applicable_kinds = *
 
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
 
dotnet_naming_rule.private_members_with_underscore.symbols  = private_fields
dotnet_naming_rule.private_members_with_underscore.style = prefix_underscore
dotnet_naming_rule.private_members_with_underscore.severity = suggestion
 
dotnet_naming_symbols.private_fields.applicable_kinds           = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_fields.required_prefix = _
 
dotnet_naming_style.prefix_underscore.capitalization = camel_case
dotnet_naming_style.prefix_underscore.required_prefix = _
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 4
end_of_line = crlf
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = false:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_namespace_match_folder = true:suggestion
dotnet_style_readonly_field = true:suggestion
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent
dotnet_style_allow_multiple_blank_lines_experimental = true:silent
dotnet_style_allow_statement_immediately_after_block_experimental = true:silent
dotnet_code_quality_unused_parameters = all:suggestion
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion
dotnet_diagnostic.CA1801.severity = warning     # Review unused parameters
dotnet_diagnostic.CA1804.severity = warning     # Remove unused locals
dotnet_diagnostic.CA1806.severity = none        # Do not ignore method results
dotnet_diagnostic.CA1821.severity = none        # Remove empty Finalizers
dotnet_diagnostic.CA1823.severity = warning     # Avoid unused private fields
dotnet_diagnostic.CA1824.severity = none        # Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1851.severity = warning     # Detect multiple enumeration
dotnet_diagnostic.CA2200.severity = none        # Rethrow to preserve stack details
# Microsoft.NetCore.Analyzers
dotnet_diagnostic.CA2000.severity = warning     # Dispose objects before losing scope (Noisy)
dotnet_diagnostic.CA1820.severity = warning     # Test for empty strings using string length
# Microsoft.CodeAnalysis.NetAnalyzers
dotnet_diagnostic.CA1000.severity = none        # Do not declare static members on generic types
dotnet_diagnostic.CA1001.severity = warning     # Types that own disposable fields should be disposable
dotnet_diagnostic.CA1010.severity = warning     # Collections should implement generic interface
dotnet_diagnostic.CA1016.severity = warning     # Mark assemblies with assembly version
dotnet_diagnostic.CA1018.severity = error       # Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1028.severity = none        # Enum Storage should be Int32
dotnet_diagnostic.CA1030.severity = none        # Use events where appropriate
dotnet_diagnostic.CA1032.severity = suggestion  # Implement standard exception constructors
dotnet_diagnostic.CA1033.severity = none        # Interface methods should be callable by child types
dotnet_diagnostic.CA1034.severity = none        # Nested types should not be visible
dotnet_diagnostic.CA1036.severity = warning     # Override methods on comparable types
dotnet_diagnostic.CA1040.severity = none        # Avoid empty interfaces
dotnet_diagnostic.CA1041.severity = warning     # Provide ObsoleteAttribute message
dotnet_diagnostic.CA1043.severity = warning     # Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1051.severity = none        # Do not declare visible instance fields
dotnet_diagnostic.CA1052.severity = none        # Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1054.severity = suggestion  # Uri parameters should not be strings
dotnet_diagnostic.CA1055.severity = suggestion  # Uri return values should not be strings
dotnet_diagnostic.CA1056.severity = suggestion  # Uri properties should not be strings
dotnet_diagnostic.CA1060.severity = none        # Move P/Invokes to NativeMethods class
dotnet_diagnostic.CA1062.severity = suggestion  # Validate arguments of public methods
dotnet_diagnostic.CA1063.severity = suggestion  # Implement IDisposable Correctly
dotnet_diagnostic.CA1064.severity = suggestion  # Exceptions should be public
dotnet_diagnostic.CA1065.severity = none        # Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1066.severity = warning     # Type {0} should implement IEquatable<T> because it overrides Equals
dotnet_diagnostic.CA1067.severity = warning     # Override Object.Equals(object) when implementing IEquatable<T>
dotnet_diagnostic.CA1068.severity = warning     # CancellationToken parameters must come last
dotnet_diagnostic.CA1031.severity = none        # Do not catch general exception types
dotnet_diagnostic.CA1303.severity = none        # Do not pass literals as localized parameters
dotnet_diagnostic.CA1304.severity = none        # Specify CultureInfo
dotnet_diagnostic.CA1707.severity = none        # Identifiers should not contain underscores
dotnet_diagnostic.CA1710.severity = none        # Identifiers should have correct suffix
dotnet_diagnostic.CA1714.severity = none        # Flags enums should have plural names
dotnet_diagnostic.CA1715.severity = warning     # Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = warning     # Identifiers should have correct prefix
dotnet_code_quality.CA1715.exclude_single_letter_type_parameters = true     # Identifiers should have correct prefix
dotnet_diagnostic.CA1716.severity = none        # Identifiers should not match keywords
dotnet_diagnostic.CA1717.severity = none        # Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1720.severity = none        # Identifier contains type name
dotnet_diagnostic.CA1721.severity = none        # Property names should not match get methods
dotnet_diagnostic.CA1724.severity = none        # Type names should not match namespaces
dotnet_diagnostic.CA1815.severity = suggestion  # Override equals and operator equals on value types
dotnet_diagnostic.CA1819.severity = none        # Properties should not return arrays
dotnet_diagnostic.CA1822.severity = warning     # Mark members as static
dotnet_code_quality.CA1822.api_surface = private, internal
dotnet_diagnostic.CA2007.severity = none        # Do not directly await a Task
dotnet_diagnostic.CA2211.severity = suggestion  # Non-constant fields should not be visible
dotnet_diagnostic.CA2218.severity = suggestion  # Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2222.severity = none        # Do not decrease inherited member visibility
dotnet_diagnostic.CA2224.severity = suggestion  # Override Equals on overloading operator equals
dotnet_diagnostic.CA2225.severity = none        # Operator overloads have named alternates
dotnet_diagnostic.CA2227.severity = none        # Collection properties should be read only
dotnet_diagnostic.CA2231.severity = none        # Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2234.severity = suggestion  # Pass system uri objects instead of strings
# Microsoft.NetFramework.Analyzers
dotnet_diagnostic.CA2153.severity = warning     # Do not catch CorruptedStateExceptions
dotnet_diagnostic.CA2235.severity = warning     # Mark all non-serializable fields
dotnet_diagnostic.CA3075.severity = warning     # Insecure DTD processing in XML
# Microsoft.CodeAnalysis.Analyzers
# These diagnostics apply to the source code of analyzers themselves.
# We do not have any analyzers in this repository, so disable these.
dotnet_diagnostic.RS1001.severity = none        # Missing diagnostic analyzer attribute
dotnet_diagnostic.RS1002.severity = none        # Invalid diagnostic analyzer attribute
dotnet_diagnostic.RS1003.severity = none        # Invalid diagnostic descriptor
dotnet_diagnostic.RS1004.severity = none        # Invalid diagnostic identifier
dotnet_diagnostic.RS1005.severity = none        # Invalid diagnostic category
dotnet_diagnostic.RS1006.severity = none        # Invalid diagnostic severity
dotnet_diagnostic.RS1008.severity = none        # Invalid diagnostic title
dotnet_diagnostic.RS1009.severity = none        # Invalid diagnostic description
dotnet_diagnostic.RS1010.severity = none        # Invalid diagnostic help link
dotnet_diagnostic.RS1011.severity = none        # Invalid diagnostic custom tags
dotnet_diagnostic.RS1012.severity = none        # Invalid diagnostic analyzer action kind
dotnet_diagnostic.RS1013.severity = none        # Invalid diagnostic analyzer action registration
dotnet_diagnostic.RS1014.severity = warning     # DoNotIgnoreReturnValueOnImmutableObjectMethodInvocation
dotnet_diagnostic.RS1015.severity = none        # Invalid diagnostic analyzer action parameter type
dotnet_diagnostic.RS1016.severity = none        # Invalid diagnostic analyzer action parameter count
dotnet_diagnostic.RS1017.severity = none        # Invalid diagnostic analyzer action return type
dotnet_diagnostic.RS1018.severity = none
dotnet_diagnostic.RS1019.severity = none
dotnet_diagnostic.RS1020.severity = none
dotnet_diagnostic.RS1021.severity = none
dotnet_diagnostic.RS1022.severity = none
dotnet_diagnostic.RS1023.severity = none
# Microsoft.Composition.Analyzers
dotnet_diagnostic.RS0006.severity = error       # Do not mixing MEF versions
dotnet_diagnostic.RS0023.severity = error       # MEF2 components must be shared
# Roslyn.Core
dotnet_diagnostic.AD0001.severity = warning     # Analyzer exception
# Roslyn.Diagnostic.Analyzers
dotnet_diagnostic.RS0001.severity = warning     # Use 'SpecializedCollections.EmptyEnumerable()'
dotnet_diagnostic.RS0002.severity = warning     # Use 'SpecializedCollections.SingletonEnumerable()'
dotnet_diagnostic.RS0005.severity = warning     # Do not use generic 'CodeAction.Create' to create 'CodeAction'
dotnet_diagnostic.RS0016.severity = warning     # Do not have undeclared API
dotnet_diagnostic.RS0017.severity = warning     # API is declared but not public
dotnet_diagnostic.RS0022.severity = warning     # Constructor make noninheritable base class inheritable
dotnet_diagnostic.RS0024.severity = warning     # The contents of the public API files are invalid:
dotnet_diagnostic.RS0025.severity = warning     # Do not duplicate symbols in public API files
dotnet_diagnostic.RS0026.severity = warning     # Do not add multiple public overloads with optional parameters
dotnet_diagnostic.RS0027.severity = warning     # Public API with optional parameter(s) should have the most parameters amongst its public overloads.
dotnet_diagnostic.RS0030.severity = warning     # Do not use banned APIs
dotnet_diagnostic.RS0031.severity = warning     # The list of banned symbols contains a duplicate
dotnet_diagnostic.RS0033.severity = none        # Importing constructor should be [Obsolete]
dotnet_diagnostic.RS0034.severity = none        # Style rule that enforces public MEF constructor marked with [ImportingConstructor]
# System.Collections.Immutable.Analyzers
dotnet_diagnostic.RS0012.severity = warning
# System.Runtime.Analyzers
dotnet_diagnostic.CA1305.severity = none        # Specify IFormatProvider
dotnet_diagnostic.CA1307.severity = none        # Specify StringComparison
dotnet_diagnostic.CA1308.severity = none        # Normalize strings to uppercase
dotnet_diagnostic.CA1810.severity = none        # Initialize reference type static fields inline
dotnet_diagnostic.CA1816.severity = none        # Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1825.severity = warning     # Avoid zero-length array allocations.
dotnet_diagnostic.CA2002.severity = none        # Do not lock on objects with weak identity
dotnet_diagnostic.CA2207.severity = none        # Initialize value type static fields inline
dotnet_diagnostic.CA2208.severity = none        # Instantiate argument exceptions correctly
dotnet_diagnostic.CA2216.severity = none        # Disposable types should declare finalizer
dotnet_diagnostic.CA2219.severity = none        # Do not raise exceptions in finally clauses
dotnet_diagnostic.CA2241.severity = none        # Provide correct arguments to formatting methods
dotnet_diagnostic.CA2242.severity = none        # Test for NaN correctly
dotnet_diagnostic.RS0014.severity = warning     # Do not use Enumerable methods on indexable collections
# System.Runtime.InteropServices.Analyzers
dotnet_diagnostic.CA1401.severity = none        # P/Invokes should not be visible
dotnet_diagnostic.CA2101.severity = none        # Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.RS0015.severity = warning     # Do not use Enumerable methods on indexable collections
# System.Threading.Tasks.Analyzers
dotnet_diagnostic.RS0018.severity = warning     # Do not create tasks without passing a TaskScheduler
# XmlDocumentationComments.Analyzers
dotnet_diagnostic.RS0010.severity = warning     # Avoid empty element tags
# Microsoft.CodeAnalysis.CSharp.Features
                                                  # Name:                                         Before:                                             After:
dotnet_diagnostic.IDE0001.severity = warning      # Simplify names                                System.Version version;                             Version version;
dotnet_diagnostic.IDE0002.severity = warning      # Simplify (member access)                      System.Version.Equals("1", "2");                    Version.Equals("1", "2");
dotnet_diagnostic.IDE0005.severity = warning      # Using directive is unnecessary                using System.Text;
dotnet_diagnostic.IDE0030.severity = warning      # Use coalesce expression (nullable)            int? y = x.HasValue ? x.Value : 0                   int? y = x ?? 0;
dotnet_diagnostic.IDE0030WithoutSuggestion.severity = error
dotnet_diagnostic.IDE0031.severity = warning      # Use null propagation (nullable)
dotnet_diagnostic.IDE0079.severity = warning      # Unused suppresion
dotnet_diagnostic.IDE0083.severity = warning      # Use pattern matching
dotnet_diagnostic.IDE0084.severity = warning      # Use IsNot
dotnet_diagnostic.IDE0090.severity = warning      # Use new(...)
dotnet_diagnostic.IDE1006.severity = warning      # Naming styles                                 Task Open()                                         Task OpenAsync()
dotnet_diagnostic.IDE1006WithoutSuggestion.severity = suggestion
# Microsoft.VisualStudio.Threading.Analyzers
# https://github.com/microsoft/vs-threading/blob/main/doc/analyzers/index.md
dotnet_diagnostic.VSTHRD200.severity = error    # Use Async suffix for async methods                                         Task OpenAsync()
dotnet_diagnostic.VSTHRD010.severity = none     # Visual Studio service should be used on main thread explicitly.
dotnet_diagnostic.VSTHRD103.severity = none     # Call async methods when in an async method.
dotnet_diagnostic.VSTHRD108.severity = none     # Thread affinity checks should be unconditional.
dotnet_diagnostic.VSTHRD003.severity = none     # Avoid awaiting or returning a Task representing work that was not started within your context as that can lead to deadlocks
dotnet_diagnostic.VSTHRD111.severity = none     # Use ConfigureAwait(true).
dotnet_diagnostic.VSTHRD100.severity = error    # Avoid async void methods
# Microsoft.VisualStudio.SDK.Analyzers
# https://github.com/microsoft/VSSDK-Analyzers/blob/main/doc/index.md
dotnet_diagnostic.VSSDK006.severity = warning   # Check whether the result of GetService calls is null
# Microsoft.CodeAnalysis.VisualBasic.CodeStyle/Microsoft.CodeAnalysis.CSharp.CodeStyle
# dotnet_diagnostic.IDE0073.severity = warning      # Enforce file header
# file_header_template = Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

# Reduce severity for some VB rules where the risks of changes outweight the benefit
[*.{vb}]
dotnet_diagnostic.IDE0031.severity = suggestion   # Use null propagation (nullable)

 
# CSharp code style settings:
[*.cs]
# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left
 
# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion
 
# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = when_on_single_line:suggestion
csharp_style_expression_bodied_constructors = when_on_single_line:suggestion
csharp_style_expression_bodied_operators = when_on_single_line:suggestion
 
# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = when_on_single_line:suggestion
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion
 
# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = false:suggestion
csharp_style_conditional_delegate_call = true:suggestion
 
# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
 
# Blocks are allowed
csharp_prefer_braces = true:suggestion
 
# Prefer switch statement
csharp_style_prefer_switch_expression = true:suggestion
 
dotnet_code_quality.CA3003.excluded_type_names_with_derived_types = System.Object
 
# Namespace declarations
csharp_style_namespace_declarations = file_scoped:suggestion
 
# Is Null
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
 
 
# Microsoft.Analyzers.ManagedCodeAnalysis
dotnet_diagnostic.CA1801.severity = warning     # Review unused parameters
dotnet_diagnostic.CA1804.severity = warning     # Remove unused locals
dotnet_diagnostic.CA1806.severity = none        # Do not ignore method results
dotnet_diagnostic.CA1821.severity = none        # Remove empty Finalizers
dotnet_diagnostic.CA1823.severity = warning     # Avoid unused private fields
dotnet_diagnostic.CA1824.severity = none        # Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1851.severity = warning     # Detect multiple enumeration
dotnet_diagnostic.CA2200.severity = suggestion  # Rethrow to preserve stack details
 
# Microsoft.NetCore.Analyzers
dotnet_diagnostic.CA2000.severity = none        # Dispose objects before losing scope (Noisy)
dotnet_diagnostic.CA1820.severity = warning     # Test for empty strings using string length
 
# Microsoft.CodeAnalysis.NetAnalyzers
dotnet_diagnostic.CA1000.severity = none        # Do not declare static members on generic types
dotnet_diagnostic.CA1001.severity = warning     # Types that own disposable fields should be disposable
dotnet_diagnostic.CA1010.severity = none        # Collections should implement generic interface
dotnet_diagnostic.CA1016.severity = warning     # Mark assemblies with assembly version
dotnet_diagnostic.CA1018.severity = warning     # Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1028.severity = suggestion  # Enum Storage should be Int32
dotnet_diagnostic.CA1030.severity = none        # Use events where appropriate
dotnet_diagnostic.CA1032.severity = warning     # Implement standard exception constructors
csharp_using_directive_placement = inside_namespace:suggestion
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:suggestion
csharp_space_around_binary_operators = before_and_after
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion
csharp_prefer_static_local_function = true:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
dotnet_diagnostic.CA1507.severity = warning
dotnet_diagnostic.CA1802.severity = error
dotnet_diagnostic.CA1805.severity = warning
dotnet_diagnostic.CA2252.severity = silent
dotnet_diagnostic.CA2260.severity = error
dotnet_diagnostic.CA3003.severity = none
 
# Microsoft.CodeAnalysis.VisualBasic.CodeStyle/Microsoft.CodeAnalysis.CSharp.CodeStyle
# dotnet_diagnostic.IDE0073.severity = warning      # Enforce file header
# file_header_template = Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.
 
 
# Reduce severity for some VB rules where the risks of changes outweight the benefit
[*.{vb}]
dotnet_diagnostic.IDE0031.severity = suggestion   # Use null propagation (nullable)
# # EditorConfig is awesome:http://EditorConfig.org
# # top-most EditorConfig file
# root = true
# [*]
# indent_style = space
# # (Please don't specify an indent_size here; that has too many unintended consequences.)
# # Code files
# [*.{cs,csx,vb,vbx,h,cpp,idl}]
# indent_size = 4
# insert_final_newline = true
# trim_trailing_whitespace = true
# # Xml project files
# [*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj},*proj]
# indent_size = 2
# # Xml config files
# [*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
# indent_size = 2
# # JSON files
# [*.json]
# indent_size = 2
# # Dotnet code style settings:
# [*.{cs,vb}]
# # Sort using and Import directives with System.* appearing first
# dotnet_sort_system_directives_first = true
# dotnet_style_qualification_for_field = true
# dotnet_style_qualification_for_property = false
# dotnet_style_qualification_for_method = false
# dotnet_style_qualification_for_event = false
# # Use language keywords instead of framework type names for type references
# dotnet_style_predefined_type_for_locals_parameters_members = true
# dotnet_style_predefined_type_for_member_access = true
# # Suggest more modern language features when available
# dotnet_style_object_initializer = true
# dotnet_style_collection_initializer = true
# dotnet_style_coalesce_expression = true
# dotnet_style_null_propagation = true
# dotnet_style_explicit_tuple_names = true
# # Non-private static fields are PascalCase
# dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
# dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
# dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style
# dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
# dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected internal, private protected
# dotnet_naming_symbols.non_private_static_fields.required_modifiers = static
# dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case
# # Constants are PascalCase
# dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
# dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
# dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style
# dotnet_naming_symbols.constants.applicable_kinds = field, local
# dotnet_naming_symbols.constants.required_modifiers = const
# dotnet_naming_style.constant_style.capitalization = pascal_case
# # Static fields are camelCase
# dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
# dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
# dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style
# dotnet_naming_symbols.static_fields.applicable_kinds = field
# dotnet_naming_symbols.static_fields.required_modifiers = static
# dotnet_naming_style.static_field_style.capitalization = camel_case
# # Instance fields are camelCase
# dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
# dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
# dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style
# dotnet_naming_symbols.instance_fields.applicable_kinds = field
# dotnet_naming_style.instance_field_style.capitalization = camel_case
# # Locals and parameters are camelCase
# dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
# dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
# dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style
# dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local
# dotnet_naming_style.camel_case_style.capitalization = camel_case
# # Local functions are PascalCase
# dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
# dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
# dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style
# dotnet_naming_symbols.local_functions.applicable_kinds = local_function
# dotnet_naming_style.local_function_style.capitalization = pascal_case
# # By default, name items with PascalCase
# dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
# dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
# dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style
# dotnet_naming_symbols.all_members.applicable_kinds = *
# dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# dotnet_naming_rule.private_members_with_underscore.symbols  = private_fields
# dotnet_naming_rule.private_members_with_underscore.style    = prefix_underscore
# dotnet_naming_rule.private_members_with_underscore.severity = error
# dotnet_naming_symbols.private_fields.applicable_kinds           = field
# dotnet_naming_symbols.private_fields.applicable_accessibilities = private
# dotnet_naming_symbols.private_fields.required_prefix = _
# dotnet_naming_style.prefix_underscore.capitalization = camel_case
# dotnet_naming_style.prefix_underscore.required_prefix = _
# # CSharp code style settings:
# [*.cs]
# # Indentation preferences
# csharp_indent_block_contents = true
# csharp_indent_braces = false
# csharp_indent_case_contents = true
# csharp_indent_switch_labels = true
# csharp_indent_labels = flush_left
# # Prefer "var" everywhere
# csharp_style_var_for_built_in_types = true
# csharp_style_var_when_type_is_apparent = true
# csharp_style_var_elsewhere = true
# # Prefer method-like constructs to have a block body
# csharp_style_expression_bodied_methods = when_on_single_line
# csharp_style_expression_bodied_constructors = when_on_single_line
# csharp_style_expression_bodied_operators = when_on_single_line
# # Prefer property-like constructs to have an expression-body
# csharp_style_expression_bodied_properties = when_on_single_line
# csharp_style_expression_bodied_indexers = when_on_single_line
# csharp_style_expression_bodied_accessors = when_on_single_line
# # Suggest more modern language features when available
# csharp_style_pattern_matching_over_is_with_cast_check = true
# csharp_style_pattern_matching_over_as_with_null_check = true
# csharp_style_inlined_variable_declaration = true
# csharp_style_throw_expression = true
# csharp_style_conditional_delegate_call = true
# # Newline settings
# csharp_new_line_before_open_brace = all
# csharp_new_line_before_else = true
# csharp_new_line_before_catch = true
# csharp_new_line_before_finally = true
# csharp_new_line_before_members_in_object_initializers = true
# csharp_new_line_before_members_in_anonymous_types = true
# # Blocks are allowed
# csharp_prefer_braces = true:silent
# # Prefer switch statement
# csharp_style_prefer_switch_expression = true
# dotnet_code_quality.CA3003.excluded_type_names_with_derived_types = System.Object
# # Namespace declarations
# csharp_style_namespace_declarations = file_scoped
# # Is Null
# dotnet_style_prefer_is_null_check_over_reference_equality_method = true

# # Microsoft.Analyzers.ManagedCodeAnalysis
# dotnet_diagnostic.CA1801.severity = warning     # Review unused parameters
# dotnet_diagnostic.CA1804.severity = warning     # Remove unused locals
# dotnet_diagnostic.CA1806.severity = none        # Do not ignore method results
# dotnet_diagnostic.CA1821.severity = none        # Remove empty Finalizers
# dotnet_diagnostic.CA1823.severity = warning     # Avoid unused private fields
# dotnet_diagnostic.CA1824.severity = none        # Mark assemblies with NeutralResourcesLanguageAttribute
# dotnet_diagnostic.CA1851.severity = warning     # Detect multiple enumeration
# dotnet_diagnostic.CA2200.severity = none        # Rethrow to preserve stack details
# # Microsoft.NetCore.Analyzers
# dotnet_diagnostic.CA2000.severity = none        # Dispose objects before losing scope (Noisy)
# dotnet_diagnostic.CA1820.severity = warning     # Test for empty strings using string length
# # Microsoft.CodeAnalysis.NetAnalyzers
# dotnet_diagnostic.CA1000.severity = none        # Do not declare static members on generic types
# dotnet_diagnostic.CA1001.severity = none        # Types that own disposable fields should be disposable
# dotnet_diagnostic.CA1010.severity = none        # Collections should implement generic interface
# dotnet_diagnostic.CA1016.severity = none        # Mark assemblies with assembly version
# dotnet_diagnostic.CA1018.severity = none        # Mark attributes with AttributeUsageAttribute
# dotnet_diagnostic.CA1028.severity = none        # Enum Storage should be Int32
# dotnet_diagnostic.CA1030.severity = none        # Use events where appropriate
# dotnet_diagnostic.CA1032.severity = none        # Implement standard exception constructors
# dotnet_diagnostic.CA1033.severity = none        # Interface methods should be callable by child types
# dotnet_diagnostic.CA1034.severity = none        # Nested types should not be visible
# dotnet_diagnostic.CA1036.severity = warning     # Override methods on comparable types
# dotnet_diagnostic.CA1040.severity = none        # Avoid empty interfaces
# dotnet_diagnostic.CA1041.severity = none        # Provide ObsoleteAttribute message
# dotnet_diagnostic.CA1043.severity = none        # Use Integral Or String Argument For Indexers
# dotnet_diagnostic.CA1051.severity = none        # Do not declare visible instance fields
# dotnet_diagnostic.CA1052.severity = none        # Static holder types should be Static or NotInheritable
# dotnet_diagnostic.CA1054.severity = none        # Uri parameters should not be strings
# dotnet_diagnostic.CA1055.severity = none        # Uri return values should not be strings
# dotnet_diagnostic.CA1056.severity = none        # Uri properties should not be strings
# dotnet_diagnostic.CA1060.severity = none        # Move P/Invokes to NativeMethods class
# dotnet_diagnostic.CA1062.severity = none        # Validate arguments of public methods
# dotnet_diagnostic.CA1063.severity = warning     # Implement IDisposable Correctly
# dotnet_diagnostic.CA1064.severity = none        # Exceptions should be public
# dotnet_diagnostic.CA1065.severity = none        # Do not raise exceptions in unexpected locations
# dotnet_diagnostic.CA1066.severity = none        # Type {0} should implement IEquatable<T> because it overrides Equals
# dotnet_diagnostic.CA1067.severity = warning     # Override Object.Equals(object) when implementing IEquatable<T>
# dotnet_diagnostic.CA1068.severity = warning     # CancellationToken parameters must come last
# dotnet_diagnostic.CA1031.severity = none        # Do not catch general exception types
# dotnet_diagnostic.CA1303.severity = none        # Do not pass literals as localized parameters
# dotnet_diagnostic.CA1304.severity = none        # Specify CultureInfo
# dotnet_diagnostic.CA1707.severity = none        # Identifiers should not contain underscores
# dotnet_diagnostic.CA1710.severity = none        # Identifiers should have correct suffix
# dotnet_diagnostic.CA1714.severity = none        # Flags enums should have plural names
# dotnet_diagnostic.CA1715.severity = none        # Identifiers should have correct prefix
# dotnet_diagnostic.CA1716.severity = none        # Identifiers should not match keywords
# dotnet_diagnostic.CA1717.severity = none        # Only FlagsAttribute enums should have plural names
# dotnet_diagnostic.CA1720.severity = none        # Identifier contains type name
# dotnet_diagnostic.CA1721.severity = none        # Property names should not match get methods
# dotnet_diagnostic.CA1724.severity = none        # Type names should not match namespaces
# dotnet_diagnostic.CA1815.severity = none        # Override equals and operator equals on value types
# dotnet_diagnostic.CA1819.severity = warning     # Properties should not return arrays
# dotnet_diagnostic.CA1822.severity = warning     # Mark members as static
# dotnet_code_quality.CA1822.api_surface = private, internal
# dotnet_diagnostic.CA2007.severity = none        # Do not directly await a Task
# dotnet_diagnostic.CA2211.severity = none        # Non-constant fields should not be visible
# dotnet_diagnostic.CA2218.severity = none        # Override GetHashCode on overriding Equals
# dotnet_diagnostic.CA2222.severity = none        # Do not decrease inherited member visibility
# dotnet_diagnostic.CA2224.severity = none        # Override Equals on overloading operator equals
# dotnet_diagnostic.CA2225.severity = none        # Operator overloads have named alternates
# dotnet_diagnostic.CA2227.severity = none        # Collection properties should be read only
# dotnet_diagnostic.CA2231.severity = none        # Overload operator equals on overriding value type Equals
# dotnet_diagnostic.CA2234.severity = none        # Pass system uri objects instead of strings
# # Microsoft.NetFramework.Analyzers
# dotnet_diagnostic.CA2153.severity = warning     # Do not catch CorruptedStateExceptions
# dotnet_diagnostic.CA2235.severity = warning     # Mark all non-serializable fields
# dotnet_diagnostic.CA3075.severity = warning     # Insecure DTD processing in XML
# # Microsoft.CodeAnalysis.Analyzers
# # These diagnostics apply to the source code of analyzers themselves.
# # We do not have any analyzers in this repository, so disable these.
# dotnet_diagnostic.RS1001.severity = none        # Missing diagnostic analyzer attribute
# dotnet_diagnostic.RS1002.severity = none        # Invalid diagnostic analyzer attribute
# dotnet_diagnostic.RS1003.severity = none        # Invalid diagnostic descriptor
# dotnet_diagnostic.RS1004.severity = none        # Invalid diagnostic identifier
# dotnet_diagnostic.RS1005.severity = none        # Invalid diagnostic category
# dotnet_diagnostic.RS1006.severity = none        # Invalid diagnostic severity
# dotnet_diagnostic.RS1008.severity = none        # Invalid diagnostic title
# dotnet_diagnostic.RS1009.severity = none        # Invalid diagnostic description
# dotnet_diagnostic.RS1010.severity = none        # Invalid diagnostic help link
# dotnet_diagnostic.RS1011.severity = none        # Invalid diagnostic custom tags
# dotnet_diagnostic.RS1012.severity = none        # Invalid diagnostic analyzer action kind
# dotnet_diagnostic.RS1013.severity = none        # Invalid diagnostic analyzer action registration
# dotnet_diagnostic.RS1014.severity = warning     # DoNotIgnoreReturnValueOnImmutableObjectMethodInvocation
# dotnet_diagnostic.RS1015.severity = none        # Invalid diagnostic analyzer action parameter type
# dotnet_diagnostic.RS1016.severity = none        # Invalid diagnostic analyzer action parameter count
# dotnet_diagnostic.RS1017.severity = none        # Invalid diagnostic analyzer action return type
# dotnet_diagnostic.RS1018.severity = none
# dotnet_diagnostic.RS1019.severity = none
# dotnet_diagnostic.RS1020.severity = none
# dotnet_diagnostic.RS1021.severity = none
# dotnet_diagnostic.RS1022.severity = none
# dotnet_diagnostic.RS1023.severity = none
# # Microsoft.Composition.Analyzers
# dotnet_diagnostic.RS0006.severity = error       # Do not mixing MEF versions
# dotnet_diagnostic.RS0023.severity = error       # MEF2 components must be shared
# # Roslyn.Core
# dotnet_diagnostic.AD0001.severity = warning     # Analyzer exception
# # Roslyn.Diagnostic.Analyzers
# dotnet_diagnostic.RS0001.severity = warning     # Use 'SpecializedCollections.EmptyEnumerable()'
# dotnet_diagnostic.RS0002.severity = warning     # Use 'SpecializedCollections.SingletonEnumerable()'
# dotnet_diagnostic.RS0005.severity = warning     # Do not use generic 'CodeAction.Create' to create 'CodeAction'
# dotnet_diagnostic.RS0016.severity = warning     # Do not have undeclared API
# dotnet_diagnostic.RS0017.severity = warning     # API is declared but not public
# dotnet_diagnostic.RS0022.severity = warning     # Constructor make noninheritable base class inheritable
# dotnet_diagnostic.RS0024.severity = warning     # The contents of the public API files are invalid:
# dotnet_diagnostic.RS0025.severity = warning     # Do not duplicate symbols in public API files
# dotnet_diagnostic.RS0026.severity = warning     # Do not add multiple public overloads with optional parameters
# dotnet_diagnostic.RS0027.severity = warning     # Public API with optional parameter(s) should have the most parameters amongst its public overloads.
# dotnet_diagnostic.RS0030.severity = warning     # Do not use banned APIs
# dotnet_diagnostic.RS0031.severity = warning     # The list of banned symbols contains a duplicate
# dotnet_diagnostic.RS0033.severity = none        # Importing constructor should be [Obsolete]
# dotnet_diagnostic.RS0034.severity = none        # Style rule that enforces public MEF constructor marked with [ImportingConstructor]
# # System.Collections.Immutable.Analyzers
# dotnet_diagnostic.RS0012.severity = warning
# # System.Runtime.Analyzers
# dotnet_diagnostic.CA1305.severity = none        # Specify IFormatProvider
# dotnet_diagnostic.CA1307.severity = none        # Specify StringComparison
# dotnet_diagnostic.CA1308.severity = none        # Normalize strings to uppercase
# dotnet_diagnostic.CA1810.severity = none        # Initialize reference type static fields inline
# dotnet_diagnostic.CA1816.severity = none        # Dispose methods should call SuppressFinalize
# dotnet_diagnostic.CA1825.severity = warning     # Avoid zero-length array allocations.
# dotnet_diagnostic.CA2002.severity = none        # Do not lock on objects with weak identity
# dotnet_diagnostic.CA2207.severity = none        # Initialize value type static fields inline
# dotnet_diagnostic.CA2208.severity = none        # Instantiate argument exceptions correctly
# dotnet_diagnostic.CA2216.severity = none        # Disposable types should declare finalizer
# dotnet_diagnostic.CA2219.severity = none        # Do not raise exceptions in finally clauses
# dotnet_diagnostic.CA2241.severity = none        # Provide correct arguments to formatting methods
# dotnet_diagnostic.CA2242.severity = none        # Test for NaN correctly
# dotnet_diagnostic.RS0014.severity = warning     # Do not use Enumerable methods on indexable collections
# # System.Runtime.InteropServices.Analyzers
# dotnet_diagnostic.CA1401.severity = none        # P/Invokes should not be visible
# dotnet_diagnostic.CA2101.severity = none        # Specify marshaling for P/Invoke string arguments
# dotnet_diagnostic.RS0015.severity = warning     # Do not use Enumerable methods on indexable collections
# # System.Threading.Tasks.Analyzers
# dotnet_diagnostic.RS0018.severity = warning     # Do not create tasks without passing a TaskScheduler
# # XmlDocumentationComments.Analyzers
# dotnet_diagnostic.RS0010.severity = warning     # Avoid empty element tags
# # Microsoft.CodeAnalysis.CSharp.Features
#                                                   # Name:                                         Before:                                             After:
# dotnet_diagnostic.IDE0001.severity = warning      # Simplify names                                System.Version version;                             Version version;
# dotnet_diagnostic.IDE0002.severity = warning      # Simplify (member access)                      System.Version.Equals("1", "2");                    Version.Equals("1", "2");
# dotnet_diagnostic.IDE0005.severity = warning      # Using directive is unnecessary                using System.Text;
# dotnet_diagnostic.IDE0030.severity = warning      # Use coalesce expression (nullable)            int? y = x.HasValue ? x.Value : 0                   int? y = x ?? 0;
# dotnet_diagnostic.IDE0030WithoutSuggestion.severity = error
# dotnet_diagnostic.IDE0031.severity = warning      # Use null propagation (nullable)
# dotnet_diagnostic.IDE0079.severity = warning      # Unused suppresion
# dotnet_diagnostic.IDE0083.severity = warning      # Use pattern matching
# dotnet_diagnostic.IDE0084.severity = warning      # Use IsNot
# dotnet_diagnostic.IDE0090.severity = warning      # Use new(...)
# dotnet_diagnostic.IDE1006.severity = warning      # Naming styles                                 Task Open()                                         Task OpenAsync()
# dotnet_diagnostic.IDE1006WithoutSuggestion.severity = suggestion
# # Microsoft.VisualStudio.Threading.Analyzers
# # https://github.com/microsoft/vs-threading/blob/main/doc/analyzers/index.md
# dotnet_diagnostic.VSTHRD200.severity = error    # Use Async suffix for async methods                                         Task OpenAsync()
# dotnet_diagnostic.VSTHRD010.severity = none     # Visual Studio service should be used on main thread explicitly.
# dotnet_diagnostic.VSTHRD103.severity = none     # Call async methods when in an async method.
# dotnet_diagnostic.VSTHRD108.severity = none     # Thread affinity checks should be unconditional.
# dotnet_diagnostic.VSTHRD003.severity = none     # Avoid awaiting or returning a Task representing work that was not started within your context as that can lead to deadlocks
# dotnet_diagnostic.VSTHRD111.severity = none     # Use ConfigureAwait(true).
# dotnet_diagnostic.VSTHRD100.severity = error    # Avoid async void methods
# # Microsoft.VisualStudio.SDK.Analyzers
# # https://github.com/microsoft/VSSDK-Analyzers/blob/main/doc/index.md
# dotnet_diagnostic.VSSDK006.severity = warning   # Check whether the result of GetService calls is null
# # Microsoft.CodeAnalysis.VisualBasic.CodeStyle/Microsoft.CodeAnalysis.CSharp.CodeStyle
# # dotnet_diagnostic.IDE0073.severity = warning      # Enforce file header
# # file_header_template = Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

# # Reduce severity for some VB rules where the risks of changes outweight the benefit
# [*.{vb}]
# dotnet_diagnostic.IDE0031.severity = suggestion   # Use null propagation (nullable)
